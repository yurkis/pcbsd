#!/bin/sh
# Command-line interaction script for life-preserver
# Author: Kris Moore
# License: BSD
# "Life-Preserver" Copyright 2013 PC-BSD Software (iXsystems)
######################################################################

# Source external functions
. /usr/local/share/pcbsd/scripts/functions.sh

# Set a default pager
PAGER=${PAGER:-more}

require_root() 
{
  UTEST="`whoami`"
  if [ "$UTEST" != "root" ] ; then
     exit_err "This command must be run as root!"
  fi
}

# Source our functions
PROGDIR="/usr/local/share/lpreserver"

# Source our local functions
. ${PROGDIR}/backend/functions.sh

title()
{
  echo "Life-Preserver
---------------------------------"
};


# Function to display help information
help_main()
{
  title

cat<<__EOF__
Available commands

Type in help <command> for information and usage about that command

       help - This help file or the help for the specified command

   cronsnap - Schedule snapshot creation via cron
  cronscrub - Schedule scrub via cron
        get - Get list of lpreserver options
   listcron - Listing of scheduled snapshots and scrubs
   listsnap - List snapshots of a zpool/dataset
     mksnap - Create a ZFS snapshot of a zpool/dataset
  replicate - Sub-command of replication tasks
 revertsnap - Revert zpool/dataset to a snapshot
     rmsnap - Remove a snapshot
        set - Set lpreserver options
     status - List datasets, along with last snapshot / replication date 
      zpool - Manage a zpool by attaching / detaching disks
__EOF__
};

help_zpool()
{
 title
 echo "Help zpool

Life-Preserver zpool sub-system

The 'zpool' sub-command allows you to attach / detach drives to a zpool, 
as well as get status and more. 

When a drive is first attached to a zpool, it will be re-formatted with
a new gpart layout and made bootable with GRUB. For this reason the disk
must be the same size, or larger, than the first array disk SWAP + ZFS
partition size. 

Available Flags:
	list - List zpool disks
      attach - Attach a new zpool disk
      detach - Remove a zpool disk
     offline - Mark a disk as offline
      online - Mark a disk as being online again

Attach Options:

	attach <zpool> <new disk>

	Example 1: 

	attach tank1 /dev/da0

	Attach the disk /dev/da0 to tank1 pool. The disk will be 
        auto-partioned with a SWAP / ZFS partition and made bootable.

Detach Options:

	detach <zpool> <disk>
	
	Detach a disk from the zpool

        Use 'zpool list' for a list of available disks 

Offline Options:

 	offline <zpool> <disk>	
	
	Mark a disk in the zpool array as 'offline', should be when you
	want to unplug a device, and anticipate plugging it back in later.

Online Options:

 	online <zpool> <disk>	
	
	Mark an offline disk in the array as online again. The disk will begin
	to resilver again automatically. 

List Options:

	list <zpool>
	
	Lists the connected disks of a zpool

Usage:

  lpreserver zpool <subcmd> <flags>

Example:

  lpreserver zpool list tank1
"
};

help_replicate()
{
 title
 echo "Help replicate

Life-Preserver replication sub-system

Replication uses ZFS to send your snapshots to a remote system which also has
a ZFS pool, such as FreeNAS or another PC-BSD system. The <hostdataset> must
also be scheduled for snapshots for replication to occur. 

On the remote system, you will need to have created the <remotedataset>
beforehand.

If you plan to replicate to a non-root user, please set the following
permissions on the remote dataset:

# zfs allow -u <user> \\
  atime,canmount,clone,compression,create,destroy,hold,mount,mountpoint,promote,receive,rename,send,userprop <remotedataset>

Usage:

  lpreserver replicate <subcmd> <flags>


Available Flags:

         add - Add a new replication target
      expand - Expand the remote iSCSI zpool
      export - Export / Offline an iSCSI zpool
      import - Import / Online an iSCSI zpool
        init - Initialize the remote side again
	list - List replication targets
      remove - Remove a replication target
         run - Start a replication manually
   saveiscsi - Save the iSCSI config data / GELI key


add Options:

	add <remotehost> <user> <port> <hostdataset> <remotedataset> <time>
	
	add iscsi <*.lps file> <hostdataset> <time> [geli key]

	add iscsi <*.lpiscsi file> <hostdataset> <time> [password file]

	<time> = XX/sync/hour/30min/10min/manual
	    XX= Time to perform replication (in 24 notation)
	  sync= Do replication with snaps (Not recommended for frequent snaps)
	  hour= Replicate hourly
	 30min= Replicate every 30 minutes
	 10min= Replicate every 10 minutes
	manual= Only replicate when requested by user

	Example 1: 

	add freenas.8343 backupuser 22 tank1 tankbackup/backups sync

	Will schedule replication of tank1 to tankbackup/backups with
	each snapshot

	Example 2: 

	add freenas.8343 backupuser 22 tank1 tankbackup/backups 22

	Will schedule replication of tank1 to tankbackup/backups at 10PM,
	notated in 24hour time

expand Options:

	expand <localdataset/zpool> <target host>

	Will expand the iSCSI-hosted zpool to the new size of the remote volume.
	For obvious reasons, this should only be done after the remote host has
	increased the size of the remote iSCSI volume.

	NOTE: This can only be used to grow a zpool, shrinking is not permitted.

export Options:

	export <localdataset/zpool> <target host>

	Exports the backup iSCSI zpool associated with the local dataset or
	zpool replication specified for <target host>

import Options:

	import <localdataset/zpool> <target host>

	Imports the backup iSCSI zpool associated with the local dataset or
	zpool replication specified for <target host>


init Options:

	init <localdataset/zpool> <target host>

	Will re-init the remote side of the replication. This can be useful
	when your replication gets stuck. Doing this option will remove
	all the data on the remote side, and require a full re-sync again.

remove Options:

	remove <dataset> <target host>
	
	Remove a replication task indicated by <dataset>
        Use 'replicate list' for a list of IDs. 

run Options:

	run <dataset> <target host>

	Starts a manual replication for <dataset> streaming to <target host>

saveiscsi options:

	saveiscsi <localdataset/zpool> <target host> [password file]

	Creates a GELI encrypted file, which contains all the iSCSI connection
	information and GELI key for the replication target. Will prompt for
	the password to set on this GELI encrypted file.

	This file can then be used with the "replicate add" command to import
	the backup zpool on another system or from the PC-BSD install media.

Examples:

  # lpreserver replicate run tank1 freenas.example.org

  
  # lpreserver replicate init tank1 freenas.example.org

" | $PAGER
};


help_set()
{
 title
 echo "Help set

Set Life-Preserver options

Usage:

  lpreserver set

Config options

     duwarn - Set to a disk percentage [0-99] at which to warn of low disk space

      email - Set the e-mail address to receive notifications
		This will require that the \"mail\" command is setup for outgoing mail

  emailopts - (ALL/WARN/ERROR) 
	 	  ALL - Send mail for every snapshot, plus warnings and errors
		 WARN - Send mail for warnings and errors (Default)
		ERROR - Send mail for errors only

  recursive - (ON/OFF) 
		   ON - Will create / destroy snapshots recursively, for all children of
			a target zpool/dataset. (Default)
		  OFF - Will only create / destroy snapshots on the specified dataset.  

Example:

  lpreserver set email "kris@example.org,admin@example.org"

  lpreserver set emailopts ALL
"
};

help_get()
{
 title
 echo "Help get

Listing of Life-Preserver options set

Usage:

  lpreserver get

Example:

  lpreserver get
"
};

help_listcron()
{
 title
 echo "Help listcron

List scheduled cron snapshots and scrubs

Usage:

  lpreserver listcron <scrub|snap>

Exmaple:

  lpreserver listcron snap

  or

  lpreserver listcron scrub
  
  (NOTE: Empty argument list shows both scheduled snapshots
  and scrubs.)

"
};

help_status()
{
 title
 echo "Help status

List monitored dataset's last snapshot and replication

Usage:

  lpreserver status

"
};


help_listsnap()
{
 title
 echo "Help listsnap

List ZFS snapshots of a dataset

Usage:

  lpreserver listsnap <dataset>

Example:

  lpreserver listsnap tank0/usr/home/kris
"
};

help_cronsnap()
{
 title
 echo "Help cronsnap

Schedule a ZFS snapshot

Usage:

  For a listing of all scheduled snapshots

  # lpreserver listcron

  or

  To start / stop snapshot scheduling

  # lpreserver cronsnap <dataset> <action> <frequency> <numToKeep>
  
  action = start / stop
  frequency = auto / daily@XX / hourly / 30min / 10min / 5min
		           ^^ Hour to execute
  numToKeep = Number of snapshots to keep total

  NOTE: When frequency is set to "auto" the following will take place:
    * Snapshots will be created every 5 minutes and kept for an hour.
    * A hourly snapshot will be kept for a day.
    * A daily snapshot will be kept for a month.
    * A Monthly snapshot will be kept for a year.
    * The life-preserver daemon will also keep track of the zpool disk space,
      if the capacity falls below 75%, the oldest snapshot will be auto-pruned.

Example:

  lpreserver cronsnap tank1/usr/home/kris start daily@22 10

  or

  lpreserver cronsnap tank1/usr/home/kris stop
"
};

help_cronscrub()
{
 title
 echo "Help cronscrub

Schedule a ZFS scrub

Usage:

  For a listing of all scheduled scrubs

  # lpreserver listcron scrub

  or

  To start / stop scrub scheduling

  # lpreserver cronscrub <dataset> <action> <frequency>
  
  action = start / stop
  frequency = VV / daily@XX / weekly@YY@XX / monthly@ZZ@XX
      VV = Execute at every VV days, XX = Hour to execute, 
      YY = Day of week to execute, ZZ = Day of month to execute

  NOTE: 
    Frequency has two modes, regular cron and anacron.
    If you specify a number or 'daily', 'weekly' and 'monthly' without 
    the '@' sign you setup anacron. When you specify with the '@' sign you setup cron. 
    If you want to be sure that your scrub is always run use anacron.
    
    If 'daily' is given you set the period to every day.
    If 'weekly' is given you set the period to every 7 days.
    If 'monthly' is given you set the period to every 30 days.

    If 'daily@' is given without hour the default is 22.
    If 'weekly@' is given without day or hour the default is day 1 and hour 22.
    (1 = Mon, 7 = Sun)
    If 'monthly@' is given without day or hour the default is day 1 and hour 22.

Example:

  lpreserver cronscrub tank1 start weekly
  (run scrub weekly)

  or

  lpreserver cronscrub tank1 start 45
  (run scrub every 45 days)

  or

  lpreserver cronscrub tank1 start daily@22
  (run scrub everyday at 10 AM)

  or

  lpreserver cronscrub tank1 start weekly@5@5
  (run scrub every Friday at 5 PM)

  or

  lpreserver cronscrub tank1 start monthly@21@13
  (run scrub on the 21:st every month at 1 AM)

  or

  lpreserver cronscrub tank1 stop
"
};

help_revertsnap()
{
 title
 echo "Help revertsnap

Revert ZFS to a snapshot of a dataset

Usage:

  lpreserver revertsnap <dataset> <SNAP>

Example:

  lpreserver revertsnap tank1/usr/home/kris 20130729-140510
"
};

help_rmsnap()
{
 title
 echo "Help rmsnap

Remove ZFS snapshot of a dataset

Usage:

  lpreserver rmsnap <dataset> <SNAP>

Example:

  lpreserver rmsnap tank1/usr/home/kris 20130729-140510

NOTE:
By default snapshots are recursive and will remove snapshots
of all children datasets automatically. To change this use:

# lpreserver set recursive off
"
};


help_mksnap()
{
 title
 echo "Help mksnap

Create a new ZFS snapshot of a dataset

Usage:

  lpreserver mksnap <dataset> <snapshotname> <comment>

Example:

  lpreserver mksnap tank1/usr/home/kris mysnapshot

  or

  lpreserver mksnap tank1/usr/home/kris mysnapshot \"Added user bob\" 

NOTE:
By default snapshots are recursive and will create snapshots
of all children datasets automatically. To change this use:

# lpreserver set recursive off
"
};

check_migrate()
{
   # Check if we need to update the flags on replication to new format
   if [ ! -e "${DBDIR}/.replicationng" -a -e "${REPCONF}" ] ; then
     echo "Updating replication tag system..."
     echo "Please be patient, this is only done once..."
     while read repLine
     do
       local LDATA=`echo $repLine | cut -d ':' -f 1`
       local REPHOST=`echo $repLine | cut -d ':' -f 3`

       local lastSEND=`zfs get -d 1 backup:lpreserver ${LDATA} | grep LATEST | awk '{$1=$1}1' OFS=" " | tail -1 | cut -d '@' -f 2 | cut -d ' ' -f 1`

       if [ -z "$lastSEND" ] ; then continue ; fi

       # Remove the old flag format and set the new one
       zfs set backup:lpreserver=' ' ${LDATA}@${lastSEND}
       zfs set lpreserver:${REPHOST}=LATEST ${LDATA}@${lastSEND}

     done < ${REPCONF}

     # Touch our marker so we don't need to do this again
     touch "${DBDIR}/.replicationng"
   fi

   # Put other migration functionality as needed here
}

# Check if we need to enable the zfs monitor
enable_watcher

# See if we need to upgrade flags on replication
check_migrate

# Check what the user wants to do
case "$1" in

   help) case "$2" in
           get) help_get ;;
           set) help_set ;;
           mksnap) help_mksnap ;;
           listcron) help_listcron ;;
           listsnap) help_listsnap ;;
           revertsnap) help_revertsnap ;;
           zpool) help_zpool ;;
           replicate) help_replicate ;;
           cronsnap) help_cronsnap ;;
           cronscrub) help_cronscrub ;;
           rmsnap) help_rmsnap ;;
           status) help_status ;;
           *) help_main ;;
         esac  ;;

    get) require_root
	 # Display our options	
	 title
	 echo "      Recursive mode: $RECURMODE"
	 echo "E-mail notifications: $EMAILMODE"
	 echo "    E-mail addresses: $EMAILADDY"
	 echo "  Disk space warn at: ${DUWARN}%"
	 exit 0
         ;;

    set) require_root
	 OPT="${2}" 

	 case $OPT in
        emailopts) case $3 in
		  ALL|WARN|ERROR) echo "E-Mail mode set to: $3" 
			          echo "$3" > ${DBDIR}/emaillevel ;;
		     *) exit_err "Unknown option" ;;
		   esac
		   ;;
            email) echo "Setting email notification to: $3" 
	           echo "$3" > ${DBDIR}/emails ;;
           duwarn) if [ ! $(is_num "$3") ] ; then exit_err "Invalid number, must be 0-99"; fi
		   echo "Setting disk warning capacity to: ${3}%" 
	           echo "$3" > ${DBDIR}/duwarn ;;
        recursive) case $3 in
		  OFF|Off|off)  echo "Recursive mode disabled" 
			        touch ${DBDIR}/recursive-off ;;
		     ON|On|on)  echo "Recursive mode enabled" 
			        rm ${DBDIR}/recursive-off 2>/dev/null ;;
		     *) exit_err "Unknown option" ;;
		   esac
		   ;;
                *) exit_err "Invalid option!" ;;
	   esac
         ;;

   mksnap) require_root
         DATASET="$2"
         SNAPNAME="$3"
	 COMMENT="$4"
         ${PROGDIR}/backend/zfsmksnap.sh "${DATASET}" "$SNAPNAME" "$COMMENT"
         ;;

 listcron) 
	 if [ -z "$2" ]; then
             ${PROGDIR}/backend/zfslistcron.sh
	     exit 0
         fi
         case ${2} in
             snap) ${PROGDIR}/backend/zfslistcron.sh snap;;
             scrub) ${PROGDIR}/backend/zfslistcron.sh scrub;;
	     *) help_listcron;;
	 esac
         ;;
        
 listsnap) require_root
         DATASET="$2"
         ${PROGDIR}/backend/zfslistsnap.sh "${DATASET}"
         ;;

 cronsnap) require_root
         DATASET="$2"
         ${PROGDIR}/backend/zfscronsnap.sh "${DATASET}" "$3" "$4" "$5"
         ;;

cronscrub) require_root
         DATASET="$2"
         ${PROGDIR}/backend/zfscronscrub.sh "${DATASET}" "$3" "$4"
         ;;

revertsnap) require_root
         DATASET="$2"
         SNAP="$3"
         ${PROGDIR}/backend/zfsrevertsnap.sh "${DATASET}" "$SNAP"
         ;;

    rmsnap) require_root
         DATASET="$2"
         SNAP="$3"
         ${PROGDIR}/backend/zfsrmsnap.sh "${DATASET}" "${SNAP}"
         ;;
    status) listStatus
         ;;
 replicate) shift
	    case ${1} in
		add) require_root ; 
		     if [ "$2" = "iscsi" ] ; then 
		       add_rep_iscsi_task "$3" "$4" "$5" "$6"
		     else
		       add_rep_task "$2" "$3" "$4" "$5" "$6" "$7"
		     fi
		     ;;
		expand) require_root ; expand_iscsi_zpool "$2" "$3" ;;
		export) require_root ; export_iscsi_zpool "$2" "$3" ;;
		import) require_root ; import_iscsi_zpool "$2" "$3" ;;
		init) require_root ; init_rep_task "$2" "$3" ;;
		list) list_rep_task ;;
                remove) require_root
                        if [ -z $2 ] || [ -z $3 ]; then
                           exit_err "Please specify <dataset> and <target host>"
                        fi
                        cat ${REPCONF} | awk -F ':' '{ print $1 }' | grep -q "^${2}\$"
                        if [ $? -ne 0 ] ; then
                           exit_err "No such replication task for dataset $2"
                        fi
                        cat ${REPCONF} | awk -F ':' '{ print $3 }' | grep -q "^${3}\$"
                        if [ $? -ne 0 ] ; then
                           exit_err "No such replication task for target host $3"
                        fi
                        rem_rep_task "$2" "$3"
                        echo "Removed replication task for dataset $2, target host $3"
                        ;;
		 run) require_root ; 
	  	      ${PROGDIR}/backend/runrep.sh "$2" "$3"
		      exit $?
		      ;;
		saveiscsi) require_root ; save_iscsi_zpool_data "$2" "$3" "$4" ;;
		*) help_replicate ;;
	    esac
	 ;;
    zpool) require_root
	    shift
	    case ${1} in
		attach) add_zpool_disk "$2" "$3" ;;
		detach) rem_zpool_disk "$2" "$3" ;;
		online) online_zpool_disk "$2" "$3" ;;
	       offline) offline_zpool_disk "$2" "$3" ;;
		list) list_zpool_disks "$2" ;;
		*) help_zpool ;;
	    esac
	 ;;
   *) help_main ;;
esac

exit 0
