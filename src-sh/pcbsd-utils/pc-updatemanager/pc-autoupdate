#!/bin/sh
# License: BSD (3 clause)
# Author: Kris Moore <kris@pcbsd.org>
# Comment: anacron script, called periodically to start updates

PATH="${PATH}:/usr/local/bin:/usr/local/sbin"

PCBSD_ETCCONF="/usr/local/etc/pcbsd.conf"
export PCBSD_ETCCONF

# Available settings
# all - Will upgrade to new major releases, security and pkg
# security - Will only apply security updates (freebsd-update)
# securitypkg - Will apply security updates and package updates - default
# pkg - Will only apply package updates
# disabled - Don't do ANY automatic updates
AUTO_UPDATE="securitypkg"

check_major()
{
  nice pc-updatemanager check >/tmp/.updateCheckOut.$$ 2>/dev/null
  rtn=$?
  if [ $rtn -eq 151 -o $rtn -eq 152 ] ; then
     sleep $waittime
     # We have a major update! Lets start it now
     tag="`cat /tmp/.updateCheckOut.$$ | grep 'TAG: fbsd-' | awk '{print $2}'`"
     rm /tmp/.updateCheckOut.$$
     nice pc-updatemanager install $tag >/var/log/pc-updatemanager-auto.log 2>/var/log/pc-updatemanager-auto.log
     exit 0
  fi
  rm /tmp/.updateCheckOut.$$
}

check_security()
{
  pc-updatemanager check >/dev/null 2>/dev/null
  rtn=$?
  if [ $rtn -eq 150 -o $rtn -eq 152 ] ; then
     sleep $waittime
     # We have a minor update! Lets start it now
     if [ "$1" = "pkgs" ] ; then
       nice pc-updatemanager fbsdupdate >/var/log/pc-updatemanager-auto.log 2>/var/log/pc-updatemanager-auto.log
     else
       nice pc-updatemanager fbsdupdatepkgs >/var/log/pc-updatemanager-auto.log 2>/var/log/pc-updatemanager-auto.log
     fi
     exit 0
  fi
}

check_pkg()
{
  pc-updatemanager pkgcheck >/dev/null 2>/dev/null
  rtn=$?
  if [ $rtn -eq 100 ] ; then
     sleep $waittime
     # We have a pkg update! Lets start it now
     nice pc-updatemanager pkgupdate >/var/log/pc-updatemanager-auto.log 2>/var/log/pc-updatemanager-auto.log
     exit 0
  fi
}

if [ `id -u` != "0" ] ; then exit 1 ; fi

# If we already have done an update, and are ready to reboot, don't kickoff another
if [ -e "/tmp/.rebootRequired" ] ; then
   if [ "`cat /tmp/.rebootRequired`" = "`who -b`" ] ; then
     exit 0
   fi
fi

# Check if updates are already running
if [ -e "/tmp/.updateInProgress" ] ; then
   pgrep -F /tmp/.updateInProgress >/dev/null 2>/dev/null
   if [ $? -eq 0 ] ; then exit 0; fi
fi

# Check if we are currently booted into the default BE
# This stops auto-updates if manually booted into another BE
beadm list | grep -q "NR "
if [ $? -ne 0 ] ; then
  exit 0
fi

waittime=$(jot -r 1 1 3600)

_upChk="`sed -n 's/AUTO_UPDATE: //p' ${PCBSD_ETCCONF} 2>/dev/null | awk '{print $1}'`"
if [ -n "${_upChk}" ] ; then AUTO_UPDATE="$_upChk" ; fi

case $AUTO_UPDATE in
           all) check_major 
                check_security 
                check_pkg ;;
      security) check_security ;;
   securitypkg) check_security "pkgs"
                check_pkg ;;
           pkg) check_pkg ;;
      disabled) # Do nothing
                ;;
   *) echo "Invalid AUTO_UPDATE setting detected! Please fix /usr/local/etc/pcbsd.conf"
      exit 1
      ;; 
esac

exit 0
