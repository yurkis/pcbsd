#!/bin/sh

PCBSD_ETCCONF="/usr/local/etc/pcbsd.conf"

do_prune()
{
  PRUNEFILE="/usr/local/share/pcbsd/conf/prune-port-files"
  if [ ! -e "$PRUNEFILE" ] ; then return; fi
        
  while read pLine
  do
     if [ -z "${pLine}" ] ; then continue ; fi
     echo $pLine | grep -q "^#"
     if [ $? -eq 0 ] ; then continue ; fi

     ls ${pLine} >/dev/null 2>/dev/null
     if [ $? -eq 0 ] ; then
        echo "Pruning: $pLine"
        rm ${pLine}
     fi
  done <${PRUNEFILE}
}

do_i3dvorak()
{
	distfile="/usr/local/share/pcbsd/distfiles/i3dvorak.txz"
	do_ports_overlay
	cd /
  	tar xvm --no-same-owner -f ${distFile} 2>/dev/null
  	if [ $? -eq 0 ] ; then
    		echo -e "DONE"
    		post_extract_setup
    		exit 0
  	else
    		echo -e "FAILED"
    		post_extract_setup
    		exit 1
  	fi
}
do_ports_overlay()
{

  distFile="/usr/local/share/pcbsd/distfiles/port-overlay.txz"

  # Cleanup any extra port cruft that doesn't place nice with PC-BSD
  do_prune

  # Since PKGNG requires this dir, but we can't ship an empty one
  # with git, lets make sure it exists
  if [ ! -d "/usr/local/etc/pkg/fingerprints/pcbsd/revoked" ] ; then
     mkdir -p /usr/local/etc/pkg/fingerprints/pcbsd/revoked
  fi

  echo -e "Extracting ports overlay data...\c"
  cd /
  tar xvm --no-same-owner -f ${distFile} 2>/dev/null
  if [ $? -eq 0 ] ; then
    echo -e "DONE"
    post_extract_setup
    exit 0
  else
    echo -e "FAILED"
    post_extract_setup
    exit 1
  fi
}

do_desktop_overlay()
{
  distFile="/usr/local/share/pcbsd/distfiles/desktop-overlay.txz"
  if [ "$sysinit" != "YES" ] ; then
    excludeOpt="-X /usr/local/share/pcbsd/conf/desktop-excludes"
  fi

  echo -e "Extracting desktop overlay data...\c"
  cd /
  tar xvm --no-same-owner -f ${distFile} ${excludeOpt} 2>/dev/null
  if [ $? -eq 0 ] ; then
    echo -e "DONE"
  else
    echo -e "FAILED"
    status="1"
  fi

  # Make sure this system is flagged as a desktop
  if [ ! -e "/etc/defaults/pcbsd" ] ; then
     touch /etc/defaults/pcbsd
  fi

  post_extract_setup
}

do_server_overlay()
{
  distFile="/usr/local/share/pcbsd/distfiles/server-overlay.txz"
  if [ "$sysinit" != "YES" ] ; then
    excludeOpt="-X /usr/local/share/pcbsd/conf/server-excludes"
  fi

  echo -e "Extracting server overlay data...\c"
  cd /
  tar xvm --no-same-owner -f ${distFile} ${excludeOpt} 2>/dev/null
  if [ $? -eq 0 ] ; then
    echo -e "DONE"
  else
    echo -e "FAILED"
    status="1"
  fi

  # Make sure this system is flagged as a server
  if [ ! -e "/etc/defaults/trueos" ] ; then
     touch /etc/defaults/trueos
  fi

  post_extract_setup
}

copy_pcbsd_overlay()
{
  cp /usr/local/share/pcbsd/conf/loader.conf.pcbsd /boot/loader.conf.pcbsd
  cp /usr/local/share/pcbsd/conf/brand-pcbsd.4th /boot/brand-pcbsd.4th
  cp /usr/local/share/pcbsd/conf/pcbsd-menu.rc /boot/menu.rc
  cp /usr/local/share/pcbsd/conf/pcbsd-menu-commands.4th /boot/menu-commands.4th
}

copy_trueos_overlay()
{
  cp /usr/local/share/pcbsd/conf/loader.conf.trueos /boot/loader.conf.trueos
  cp /usr/local/share/pcbsd/conf/brand-trueos.4th /boot/brand-trueos.4th
}

# Files we need to touch or change after an upgrade
post_extract_setup()
{
  # Make sure rc.conf.pcbsd is enabled
  grep -q 'rc.conf.pcbsd' /etc/defaults/rc.conf
  if [ $? -ne 0 ] ; then
    # Setup /etc/defaults/rc.conf
    sed -i '' 's|/etc/rc.conf /etc/rc.conf.local|/etc/rc.conf.pcbsd /etc/rc.conf /etc/rc.conf.local|g' /etc/defaults/rc.conf 2>/dev/null
    grep -q "rc.conf.pcbsd" /etc/defaults/rc.conf
    if [ $? -ne 0 ] ; then
      echo "WARNING: rc.conf.pcbsd not enabled in /etc/defaults/rc.conf"
      status="1"
    fi
  fi

  # Copy over the 4th loader logo file
  cp /usr/local/share/pcbsd/conf/logo-pcbsd.4th /boot/logo-pcbsd.4th

  # Stuff not for jails
  if [ -e "/boot/kernel/kernel" ] ; then

    # Remove the legacy setting of default linux compat, let user control that
    uname -r | grep -q "10.1"
    if [ $? -ne 0 ] ; then
      grep -q "compat.linux.osrelease=2.6.18" /etc/sysctl.conf
      if [ $? -eq 0 ] ; then
        cat /etc/sysctl.conf | grep -v "compat.linux.osrelease" > /etc/sysctl.conf.new
        mv /etc/sysctl.conf.new /etc/sysctl.conf
      fi
    fi

    # Make sure that anacron has the auto-update tool enabled
    grep -q 'autoupdate' /usr/local/etc/anacrontab
    if [ $? -ne 0 ] ; then
       echo "1	20	autoupdate	/usr/local/bin/pc-autoupdate" >>/usr/local/etc/anacrontab
    fi

    # Check if we need to copy pcbsd or trueos overlay
    if [ -e "/boot/loader.conf.pcbsd" ] ; then
       copy_pcbsd_overlay
    elif [ -e "/boot/loader.conf.trueos" ] ; then
       copy_trueos_overlay
    else
       # No default loader.conf? Lets figure out which to copy
       if [ -e "/etc/defaults/pcbsd" ] ; then
         copy_pcbsd_overlay
       else
         copy_trueos_overlay
       fi
    fi

    # Copy over the default rc.conf.pcbsd file
    cp /usr/local/share/pcbsd/conf/rc.conf.pcbsd /etc/rc.conf.pcbsd

    # If the default firewall rules are missing, create them now
    if [ ! -e "/etc/ipfw.rules" ] ; then
       if [ "`sysrc -n firewall_enable`" = "YES" ] ; then
         /usr/local/share/pcbsd/scripts/reset-firewall
       fi
    fi

    # Make sure freebsd-update ignores rc.conf.pcbsd
    grep -q "rc.conf.pcbsd" /etc/freebsd-update.conf
    if [ $? -ne 0 ] ; then
      cp /usr/local/share/pcbsd/conf/freebsd-update.conf /etc/freebsd-update.conf
    fi

    # Check if we need to enable openntpd
    grep -q "openntpd" /etc/rc.conf.pcbsd 2>/dev/null
    if [ $? -ne 0 ] ; then
       grep -q "openntpd" /etc/rc.conf
       if [ $? -ne 0 ] ; then
         echo "# Enable OpenNTPD" >> /etc/rc.conf
         echo "ntpd_enable=\"NO\"" >> /etc/rc.conf
         echo "openntpd_enable=\"YES\"" >> /etc/rc.conf
       fi
    fi
    if [ ! -e "/usr/local/etc/ntpd.conf" ] ; then
       cp /usr/local/share/pcbsd/conf/ntpd.conf /usr/local/etc/ntpd.conf
    fi

    # Make sure we have a default smb4.conf
    if [ ! -e "/usr/local/etc/smb4.conf" ] ; then
       cp /usr/local/share/pcbsd/conf/smb4.conf /usr/local/etc/smb4.conf
    fi
  fi # End of not for jails section

  # Remove some old expired files if they exist
  if [ -e "/usr/local/etc/rc.d/ix_diagnose" ]; then
    rm /usr/local/etc/rc.d/ix_diagnose
  fi
  if [ -e "/usr/local/etc/rc.d/ix_textdump" ]; then
    rm /usr/local/etc/rc.d/ix_textdump
  fi
  if [ -e "/usr/local/share/pcbsd/bin/pkg" ]; then
    rm /usr/local/share/pcbsd/bin/pkg
  fi

  # Update the pkgng configuration
  pc-updatemanager syncconf 2>/dev/null >/dev/null

}

show_opts()
{
   cat << EOF

usage: `basename $0` [options]
                
Options:
  ports          -- Extract port overlay files
  i3dvorak	 -- Extract i3 dvorak system config
  desktop        -- Extract desktop overlay files (Excluding user-configurable)
  server         -- Extract server overlay files (Excluding user-configurable)
  --sysinit      -- Overwrite user-configurable files (Used for first time init)

EOF

}

# Set some defaults
sysinit="no"
status="0"

# Parse CLI flags
while [ $# -gt 0 ]; do
   case "$1" in
     desktop) target="desktop" ;;
      server) target="server" ;;
       ports) target="ports" ;;
       i3dvorak) target="i3dvorak" ;;
   --sysinit) sysinit="YES" ;;
           *) echo "Invalid option $1 specified!"
	      show_opts
	      exit 1
              ;;
    esac
    shift
done

# Now DO it
case $target in
    desktop) do_desktop_overlay ;;
     server) do_server_overlay ;;
      ports) do_ports_overlay ;;
      portsi3dv) do_i3dvorak ;;
          *) show_opts ;;
esac

exit $status
