#!/bin/sh
# License: BSD
# Author: Kris Moore and Brandon Schneider
# 
# Dispatch script, run as root, allows www process to run 
# specific commands with priv
#
# Also runs as a daemon to process the said commands that appcafe
# wants to have run

# queue commands
# <app> <origin> <flag> <target>
# app = pbi / pkg
# origin = www/firefox or other PBI/PKG origin
# flag = install/delete/info
# target = __system__ / <jailname>

PATH="$PATH:/usr/local/bin:/usr/local/sbin"
export PATH

# QUEUE File
QTMPDIR="/var/tmp/appcafe"
QLOGDIR="${QTMPDIR}/logs"
QLIST="${QTMPDIR}/dispatch-queue"
QDISID="${QTMPDIR}/dispatch-id"
QWRK="${QLIST}.working"
QRESULTS="${QLIST}.results"

init_daemon()
{
  # Appweb tmp dir
  if [ ! -d "$QTMPDIR" ] ; then
     mkdir ${QTMPDIR}
  fi
  if [ ! -d "$QLOGDIR" ] ; then
     mkdir ${QLOGDIR}
  fi

  chmod 600 ${QTMPDIR}
  chmod 600 ${QLOGDIR}

  # Cleanup some working / temp files
  for rmFile in ${QLIST} ${QWRK}
  do
     if [ -e "$rmFile" ] ; then
       rm $rmFile
     fi
  done

  # Cleanup old daemon runtime
  for i in $QWRK $QRESULTS
  do
    if [ ! -e "$i" ] ; then
      touch $i
      chmod 600 $i
    fi
  done
}

check_iocage_bases()
{
  # Do some uname checking
  SYSUNAME=$(uname -r | cut -d '-' -f 1-2)
  NEWUNAME=${SYSUNAME}
  echo $SYSUNAME | grep -q "CURRENT"
  if [ $? -eq 0 ] ; then
    # Ugly hack, iocage hates -CURRENT right now
    NEWUNAME="10.2-RELEASE"
  fi
  echo $SYSUNAME | grep -q "STABLE"
  if [ $? -eq 0 ] ; then
    NEWUNAME="`echo $SYSUNAME | cut -d '-' -f 1`-RELEASE"
  fi
  btags="release=$NEWUNAME"

  # Next make sure this RELEASE is downloaded, if not fetch it
  iocage list -r | grep -q "$NEWUNAME"
  if [ $? -ne 0 ] ; then
    echo "iocage fetch $tags ftphost=iso.cdn.pcbsd.org ftpdir=/$NEWUNAME/`uname -m`/dist" >>$QLOGFILE
    iocage fetch $btags ftphost=iso.cdn.pcbsd.org ftpdir=/$NEWUNAME/`uname -m`/dist >>$QLOGFILE 2>>$QLOGFILE
  fi

  tags="base=$NEWUNAME"
}



run_queue_cmd()
{
  # Breakdown the line into individual flags
  app=`echo $1 | cut -d " " -f 1`
  origin=`echo $1 | cut -d " " -f 2`
  flag=`echo $1 | cut -d " " -f 3`
  target=`echo $1 | cut -d " " -f 4`

  # Get the uniq identifier for this cmd
  local ident="${2}"
  QLOGFILE="${QLOGDIR}/${ident}.log"
  touch ${QLOGFILE}
  chmod 644 ${QLOGFILE}


  # Sanity check some of the given options
  case $app in
   pkg|pbi) case $flag in
            install|delete|info) ;;
                   *) echo "Unauthorized command specified: $1" >> ${QLOGFILE}
                      echo "FAILED $ident $@" >> $QRESULTS
                      return 1
                      ;;
            esac
            ;;
 pkgupdate) target="$origin" ;;
    iocage) case $origin in
	       destroy|fetch|create) ;;
		   *) echo "Unauthorized iocage command specified: $1" >> ${QLOGFILE}
                      echo "FAILED $ident $@" >> $QRESULTS
                      return 1 ;;
	    esac
            ;;
         *) echo "Unauthorized command specified: $1" >> ${QLOGFILE}
            echo "FAILED $ident $@" >> $QRESULTS
            return 1
            ;;
  esac

  
  # Now build the command
  if [ "$app" == "pbi" ];then
     cmd="pbi"
     if [ "$flag" = "app" ] ; then flag="$flag --licagree"; fi
     if [ "$target" != "__system__" ] ; then
       cmd="$cmd $flag -j $target $origin"
     else
       cmd="$cmd $flag $origin"
     fi
  elif [ "$app" == "pkg" ];then
     cmd="pkg"
     if [ "$target" != "__system__" ] ; then
       cmd="$cmd -j $target"
     fi
     cmd="$cmd $flag -y $origin"
  elif [ "$app" == "pkgupdate" ];then
     cmd="pc-updatemanager pkgupdate"
     if [ "$target" != "__system__" ] ; then
       cmd="iocage pkgupdate $target"
     fi
  elif [ "$app" == "iocage" ];then
     # App Container / gitjail
     if [ "$origin" = "fetch" ] ; then
        neworigin="`echo $flag | sed 's|/|-|g'`"

	# Check the iocage bases we have
	check_iocage_bases

	# First make sure this jail doesn't exist
	iocage get ip4_addr pbicage-$neworigin 2>/dev/null >/dev/null
        if [ $? -eq 0 ] ; then
	  echo "ERROR: The plugin jail pbicage-$neworigin is already installed!" >> ${QLOGFILE}
          echo "FAILED $ident $@" >> $QRESULTS
        fi

	if [ -n "$(sysctl -qn kern.features.vimage)" ] ; then
          # System has VIMAGE enabled
          cmd="iocage fetch $target $tags tag=pbicage-$neworigin boot=on vnet=on dhcp=on bpf=on mount_linprocfs=1 hack88=1"
	else
	  # No VIMAGE, use fallback method
	  cmd="iocage fetch $target $tags tag=pbicage-$neworigin boot=on ip4_addr=DEFAULT|AUTOIP4 mount_linprocfs=1 hack88=1"
	fi
     fi 
     # Regular jail creation
     if [ "$origin" = "create" ] ; then
        newtag="$flag"
        sshkey=`echo $1 | awk -F:::: '{print $2}'`
        customipv4=`echo $1 | awk -F:::: '{print $4}'`

	# Check the iocage bases we have
	check_iocage_bases

	# First make sure this jail doesn't exist
	iocage get ip4_addr pbijail-$newtag 2>/dev/null >/dev/null
        if [ $? -eq 0 ] ; then
	  echo "ERROR: The plugin jail pbijail-$newtag is already installed!" >> ${QLOGFILE}
          echo "FAILED $ident $@" >> $QRESULTS
        fi

	IPFLAGS="DEFAULT|AUTOIP4"
	if [ -n "$customipv4" -a "$customipv4" != "" ] ; then
	  IPFLAGS="DEFAULT|$customipv4"
	fi

	if [ -n "$(sysctl -qn kern.features.vimage)" ] ; then
          # System has VIMAGE enabled
	  if [ -n "$customipv4" -a "$customipv4" != "" ] ; then
            cmd="iocage create tag=pbijail-$newtag ip4_addr=$IPFLAGS mount_linprocfs=1 hack88=1 $tags"
	  else
            cmd="iocage create tag=pbijail-$newtag boot=on vnet=on dhcp=on bpf=on mount_linprocfs=1 hack88=1 $tags"
	  fi
	else
	  # No VIMAGE, use fallback method
	  cmd="iocage create tag=pbijail-$newtag boot=on ip4_addr=$IPFLAGS mount_linprocfs=1 hack88=1 $tags"
	fi
     fi
     if [ "$origin" = "destroy" ] ; then
        # Stop the jail first
        iocage stop $target >>${QLOGFILE} 2>>${QLOGFILE}

	# Re-enable the firewall for this jail IP
	block_jail_ip4 "$target"

	# Set the destroy command
	cmd="iocage destroy -f $target"
     fi
  fi

  # Remove any old ident lines from results
  sed -i '' "/ $ident /d" ${QRESULTS}

  # Lets run the command now
  echo "Running: $cmd" >>$QLOGFILE 2>>$QLOGFILE
  $cmd >>$QLOGFILE 2>>$QLOGFILE
  err=$?
  if [ $err -ne 0 ] ; then
     echo "FAILED $ident $@" >> $QRESULTS
  else
     echo "SUCCESS $ident $@" >> $QRESULTS
  fi

  # If we nuked packages, lets run autoremove also
  if [ "$flag" = "delete" ] ; then
    if [ "$app" = "pbi" -o "$app" = "pkg" ] ; then
      echo "Running: pkg autoremove" >>$QLOGFILE 2>>$QLOGFILE
      pkg autoremove -y >>$QLOGFILE 2>>$QLOGFILE
    fi
  fi

  # If we created a new jail, lets bootstrap iocage with pkgng
  if [ "$app" = "iocage" -a "$origin" = "create" -a $err -eq 0 ] ; then
     # Start the jail
     echo "#Starting the jail..." >>${QLOGFILE}
     iocage start pbijail-$newtag >>${QLOGFILE} 2>>${QLOGFILE}
     local jdir="`iocage get mountpoint pbijail-$newtag`/root"
     bootstrap_pkgng_iocage "$jdir" >>${QLOGFILE} 2>>${QLOGFILE}
     if [ -n "$sshkey" -a "$sshkey" != "" ] ; then
       enable_sshd_jail "$jdir" >>${QLOGFILE} 2>>${QLOGFILE}
       iocage stop pbijail-$newtag >>${QLOGFILE} 2>>${QLOGFILE}
       iocage start pbijail-$newtag >>${QLOGFILE} 2>>${QLOGFILE}
    fi
  fi

  # If we create a new plugin, lets start it now
  if [ "$app" = "iocage" -a "$origin" = "fetch" -a $err -eq 0 ] ; then
     iocage start pbicage-$neworigin >>${QLOGFILE} 2>>${QLOGFILE}
     if [ $? -eq 0 ] ; then
       unblock_jail_ip4 "pbicage-$neworigin"
     fi
  fi

  # Inform syscache of the updates to check
  syscache "startsync" >/dev/null 2>/dev/null

  # Save the log file for later diagnostics
  return $err
}

enable_sshd_jail()
{
  local jaildir="${1}"

  # Enable SSHD
  echo "sshd_enable=\"YES\"" >> ${jaildir}/etc/rc.conf

  # Create the 'freebsd' user
  chroot ${jaildir} pw useradd freebsd -b /usr/home -s /bin/csh -d /usr/home/freebsd -m -G wheel

  mkdir -p ${jaildir}/usr/home/freebsd/.ssh
  mkdir -p ${jaildir}/usr/local/etc/sudoers.d 2>/dev/null
  echo "%wheel ALL=(ALL) NOPASSWD: ALL" > ${jaildir}/usr/local/etc/sudoers.d/appcafe
  echo "$sshkey" > ${jaildir}/usr/home/freebsd/.ssh/authorized_keys
  chroot ${jaildir} chown -R freebsd:freebsd /usr/home/freebsd
  chroot ${jaildir} chmod 700 /usr/home/freebsd/.ssh
  chroot ${jaildir} chmod 644 /usr/home/freebsd/.ssh/authorized_keys
}

block_jail_ip4()
{
  # Get the IP address of the plugin
  local _oldIP=`iocage get ip4_addr $1 | cut -d '|' -f 2 | cut -d '/' -f 1`
  # If on PC-BSD / TrueOS with ipfw-rules, we can remove this plugin
  if [ -z "$_oldIP" -o ! -e "/etc/ipfw.rules" ] ; then return; fi

  touch /etc/ipfw.openip
  grep -vx "ip4 $_oldIP" /etc/ipfw.openip > /etc/ipfw.openip.new
  mv /etc/ipfw.openip.new /etc/ipfw.openip
  if [ "$(sysrc -n firewall_enable)" = "YES" ] ; then
    service ipfw restart 2>/dev/null >/dev/null
  fi
}

unblock_jail_ip4()
{
  # Get the IP address of the new plugin
  local _newIP=`iocage get ip4_addr $1 | cut -d '|' -f 2 | cut -d '/' -f 1`
  # If on PC-BSD / TrueOS with ipfw-rules, we can add this plugin
  if [ -z "$_newIP" -o ! -e "/etc/ipfw.rules" ] ; then return; fi

  touch /etc/ipfw.openip
  grep -xq "ip4 $_newIP" /etc/ipfw.openip
  if [ $? -ne 0 ] ; then
     echo "ip4 $_newIP" >> /etc/ipfw.openip
  fi
  if [ "$(sysrc -n firewall_enable)" = "YES" ] ; then
      service ipfw restart 2>/dev/null >/dev/null
  fi
}

bootstrap_pkgng_iocage()
{
  local jaildir="${1}"
  local outfile="${1}/tmp/.pkgBS.sh"
  echo "Bootstrapping pkgng for jail ${jaildir}"

  if [ ! -e "${jaildir}/bin/freebsd-version" ] ; then
     echo "Missing /bin/freebsd-version in jail.."
     echo "PKG bootstrap can only be done on 10.0 and higher, skipping..."
     return 1
  fi

  # Setup the repo to use the XX.0-RELEASE pkgng branch
  local jrelease=`${jaildir}/bin/freebsd-version`
  echo "$jrelease" | grep -q "RELEASE"
  if [ $? -eq 0 ] ; then
    local release="`echo ${jrelease} | cut -d '-' -f 1 |  cut -d '.' -f 1`.0-RELEASE"
  else
    local release="`echo ${jrelease} | cut -d '-' -f 1-2`"
  fi
  local arch="$(uname -m)"

cat <<__EOF__ >"${outfile}"
#!/bin/sh
rm /etc/pkg/FreeBSD.conf 2>/dev/null >/dev/null

# Create the pkg.conf file
mkdir -p /usr/local/etc 2>/dev/null
echo "PKG_CACHEDIR: /usr/local/tmp
REPOS_DIR: [
                \"/usr/local/etc/pkg/repos\"
           ]" > /usr/local/etc/pkg.conf

# Create the repo dirs
mkdir -p /usr/local/etc/pkg/repos 2>/dev/null
mkdir -p /usr/local/etc/pkg/fingerprints/pcbsd/trusted 2>/dev/null
mkdir -p /usr/local/etc/pkg/fingerprints/pcbsd/revoked 2>/dev/null

# Save the repo configuration file
echo "pcbsd-major: {
               url: \"http://pkg.cdn.pcbsd.org/${release}/${arch}\",
               signature_type: \"fingerprints\",
               fingerprints: \"/usr/local/etc/pkg/fingerprints/pcbsd\",
               enabled: true
              }" > /usr/local/etc/pkg/repos/pcbsd.conf

# Create the repo.dist file
echo "pcbsd: {
               url: \"http://pkg.cdn.pcbsd.org/VERSION/ARCH\",
               signature_type: \"fingerprints\",
               fingerprints: \"/usr/local/etc/pkg/fingerprints/pcbsd\",
               enabled: true
              }" > /usr/local/etc/pkg/repos/pcbsd.conf.dist

# Save the fingerprint file
echo "function: sha256
fingerprint: b2b9e037f938cf20ba68aa85ac88c15889c729a7f6b70c25069774308e760a03" > /usr/local/etc/pkg/fingerprints/pcbsd/trusted/pkg.cdn.pcbsd.org.20131209

#pkg update -f

exit 0
__EOF__

  # Run the file to bootstrap pkg
  chroot $jaildir sh /tmp/.pkgBS.sh
  rm ${outfile}

  # Now boot-strap the real pkgng pkg
  pkg -c ${jaildir} install -qy ports-mgmt/pkg
  pkg -c ${jaildir} install -qy security/sudo
}

run_daemon()
{
  pid="/var/run/appcafe-dispatcher.pid"

  # Check if we have another copy of the daemon running
  if [ -e "${pid}" ] ; then
     pgrep -F ${pid} >/dev/null 2>/dev/null
     if [ $? -eq 0 ] ; then return 0; fi
  fi
  echo "$$" > ${pid}

  # Setup the daemon files
  init_daemon

  # Run the main loop
  while :
  do
    # Check if we have anything to do?
    if [ ! -e "$QLIST" ] ; then
       sleep 3
       continue
    fi

    # Move the queue over and run it
    mv $QLIST ${QLIST}.tmp
    while read line
    do
       TASKIDENT=`uuidgen`
       echo "$line ###${TASKIDENT}###" > $QWRK
       run_queue_cmd "$line" "$TASKIDENT"
       echo "" > $QWRK
    done < ${QLIST}.tmp
    rm ${QLIST}.tmp

    # Done with pkg ops, lets inform syscache to refresh
    syscache "startsync" >/dev/null 2>/dev/null
  done

  rm $pid
}

list_status()
{
  if [ -e "$QLIST" ] ; then
     cat ${QLIST}
  fi
  if [ -e "$QLIST.tmp" ] ; then
     cat ${QLIST}.tmp
  fi
}

list_results()
{
  if [ -e "$QRESULTS" ] ; then
    tail -50 ${QRESULTS}
  else
    echo ""
  fi
}

display_log()
{
  if [ -e "${QLOGDIR}/${1}.log" ] ; then
    cat ${QLOGDIR}/${1}.log
  else
    echo ""
  fi
}

run_iocage_cmd()
{
  case $2 in
      start) iocage start $3
	     iocage set boot=on $3
             ;;
       stop) iocage stop $3
	     iocage set boot=off $3
	     ;;
       auto) iocage set boot=on $3 ;;
        set) iocage set $3 $4 $5 $6;;
        get) iocage get $3 $4 $5 $6 ; exit $? ;;
   activate) iocage activate $3 $4 $5 $6 ; exit $? ;;
          *) echo "Non-dispatch-approved iocage command: $2" ;;
  esac
  syscache "startsync" >/dev/null 2>/dev/null
}

get_iocage_ip4()
{
  jid="$3"
  if [ -n "$(sysctl -qn kern.features.vimage)" ] ; then
    # Using VIMAGE
    uuid=$(iocage get all $jid | grep uuid | cut -d ":" -f 2)
    jid=$(jls | grep $uuid | awk '{print $1}')
    jexec $jid ifconfig | grep 'inet ' | grep broadcast | awk '{print $2}'
  else
    # Regular method
    iocage get ip4_addr $jid
  fi
}


run_iocage_getfstab()
{
  jid="$3"
  fstab=$(iocage get mountpoint $jid)/root/fstab
  if [ -e "$fstab" ] ; then
     cat $fstab
     exit 0
  fi
  exit 1
}

run_iocage_addfstab()
{
  jid="$3"
  mnt=$(echo $4 | sed "s|^/||g")
  jaildir=$(iocage get mountpoint $jid)/root
  fstab=$(echo $jaildir | sed 's|/root||g')/fstab
  touch $fstab

  if [ -z "$mnt" ] ; then
    echo "Cannot nullfs mount /"
    exit 1
  fi

  if [ ! -d "/$mnt" ] ; then
    echo "No such directory: /$mnt"
    exit 1
  fi

  # Sanity check the request
  case $mnt in
    bin|boot|compat|dev|etc|iocage|lib|libexec|net|proc|rescue|sbin|sys|tmp|usr)
         echo "Cowardly refusing to nullfs mount /$mnt"
         exit 1
         ;;
      *) ;;
  esac

  if [ ! -d "$jaildir/$mnt" ] ; then
    mkdir -p $jaildir/$mnt
  fi

  # Add the fstab entry
  echo "nullfs	/$mnt	$jaildir/$mnt	rw	0	0" >> $fstab

  # Mount the directory
  mount_nullfs /$mnt $jaildir/$mnt

  exit 0
}

run_iocage_delfstab()
{
  jid="$3"
  mnt=$(echo $4 | sed "s|^/||g")
  jaildir=$(iocage get mountpoint $jid)/root
  fstab=$(echo $jaildir | sed 's|/root||g')/fstab
  touch $fstab

  # Delete the fstab entry
  cat $fstab | grep -v "$jaildir/$mnt	rw" > ${fstab}.new
  mv ${fstab}.new ${fstab}
  umount -f "${jaildir}/$mnt"
  exit 0
}

run_service_cmd()
{

  local jid=""
  sname="$3"
  sscript="$4"
  if [ "$5" != "__system__" ] ; then
     jid="$5"
     jdir=`jls | grep " ${jid} " | awk '{print $4}'`
     rcfile="${jdir}/etc/rc.conf"
  else
     rcfile="/etc/rc.conf"
  fi

  case $2 in
       stop) # First, stop the service
	     if [ -n "$jid" ] ; then
	        jexec $jid service $sscript stop
             else
                service $sscript stop
	     fi 
	     # Now disable rc.conf entry
	     sed -i '' "/^${sname}_enable=\"YES\"/d" ${rcfile}
             ;;
      start) # First, enable the service
	     sed -i '' "/^${sname}_enable=\"NO\"/d" ${rcfile}
	     sed -i '' "/^${sname}_enable=\"YES\"/d" ${rcfile}
	     echo "${sname}_enable=\"YES\"" >> ${rcfile}

	     if [ -n "$jid" ] ; then
	        jexec $jid service $sscript start
             else
                service $sscript start
	     fi 
             ;;
    restart) # Restart the service 
	     if [ -n "$jid" ] ; then
	        jexec $jid service $sscript restart
             else
                service $sscript restart
             fi
             ;;
          *) echo "Non-dispatch-approved service command: $2" ;;
  esac
}

# Get value from config file
getcfg()
{
 cscript="$pbicdir/scripts/getconfig.sh"
 if [ ! -e "$cscript" ] ; then exit 1; fi

 if [ "$jail" != "__system__" ] ; then
    jid="$jail"
    jdir=`jls | grep " ${jid} " | awk '{print $4}'`
    rm ${jdir}/tmp/.appcafe-getcfg.sh.$$ >/dev/null 2>/dev/null
    cp $cscript ${jdir}/tmp/.appcafe-getcfg.sh.$$
    jexec $jid sh /tmp/.appcafe-getcfg.sh.$$ "$key"
    err=$?
    rm ${jdir}/tmp/.appcafe-getcfg.sh.$$
 else
   $cscript "$key"
   err=$?
 fi

 if [ $err -ne 0 ] ; then
   echo "Failed getting key: $key"
   exit 1
 fi
 exit 0
}

# Set value in config file
setcfg()
{
 cscript="$pbicdir/scripts/setconfig.sh"
 if [ ! -e "$cscript" ] ; then exit 1; fi
 if [ "$jail" != "__system__" ] ; then
    jid="$jail"
    jdir=`jls | grep " ${jid} " | awk '{print $4}'`
    rm ${jdir}/tmp/.appcafe-setcfg.sh.$$ >/dev/null 2>/dev/null
    cp $cscript ${jdir}/tmp/.appcafe-setcfg.sh.$$
    chmod 755 ${jdir}/tmp/.appcafe-setcfg.sh.$$
    sync
    jexec $jid sh /tmp/.appcafe-setcfg.sh.$$ "$key" "$value"
    err=$?
    rm ${jdir}/tmp/.appcafe-setcfg.sh.$$
 else
   $cscript "$key" "$value"
   err=$?
 fi

 if [ $err -ne 0 ] ; then
   echo "Failed getting key: $key"
   exit 1
 fi
 exit 0
}

donecfg()
{
 cscript="$pbicdir/scripts/doneconfig.sh"
 if [ ! -e "$cscript" ] ; then exit 1; fi
 if [ "$jail" != "__system__" ] ; then
    jid="$jail"
    jdir=`jls | grep " ${jid} " | awk '{print $4}'`
    rm ${jdir}/tmp/.appcafe-donecfg.sh.$$ >/dev/null 2>/dev/null
    cp $cscript ${jdir}/tmp/.appcafe-donecfg.sh.$$
    chmod 755 ${jdir}/tmp/.appcafe-donecfg.sh.$$
    sync
    sleep 1
    jexec $jid sh /tmp/.appcafe-donecfg.sh.$$
    err=$?
    rm ${jdir}/tmp/.appcafe-donecfg.sh.$$
 else
   $cscript
   err=$?
 fi

 if [ $err -ne 0 ] ; then
   echo "Failed getting key: $key"
   exit 1
 fi
 exit 0
}

print_usage()
{
  echo "Dispatcher usage:
--------------------------------
   iocage {cmd} [args]
   queue {pkg|pbi} {origin} {install/delete/info} {__system__|<jailname>}
   pkgupdate {__system__|<jailname>}
   service {start|stop|restart} {servicetag} {servicerc} {__system__|<jid>}
   getcfg {pbicdir} {__system__|<jid>} {key}
   setcfg {pbicdir} {__system__|<jid>} {key} {value}
   donecfg {pbicdir} {__system__|<jid>}
   daemon
   status
   results 
   log {hash}
" 
}

bad_disid() {
  echo "Invalid dispatcher ID!"
  exit 1
}

verify_disid() {
  # Check if we have a valid Dispatcher ID set
  if [ -z "$PHP_DISID" ] ; then bad_disid; fi
  if [ "$PHP_DISID" != "`cat $QDISID`" ] ; then bad_disid; fi
  return 0
}

if [ "`/usr/bin/id -u`" != "0" ] ; then
   echo "Must be run as root!"
   exit 1
fi

if [ -n "$PHP_DISID" ] ; then
  echo "$PHP_DISID" > /tmp/disID
fi

case $1 in
    # Figure out which iocage command we are using
    iocage) verify_disid
	    case $2 in
              # These commands will be queued
              create|destroy|fetch) echo "$@" >>${QLIST} ;;
	      getip4) get_iocage_ip4 "$@" ;;
	      addfstab) run_iocage_addfstab "$@" ;;
	      delfstab) run_iocage_delfstab "$@" ;;
	      getfstab) run_iocage_getfstab "$@" ;;
	      # These commands can be run immediately
	      start|stop|auto|set|get|activate) run_iocage_cmd $@ ;;
	      *) echo "Invalid iocage command! $2" ; exit 1 ;;
	    esac
	    ;;
    # Commands that interact with services
   service) verify_disid
	    run_service_cmd $@ ;;
    # These commands interact with the dispatcher daemon
     queue) verify_disid
            echo "$@" | cut -d ' ' -f 2- >>${QLIST} ;;
 pkgupdate) verify_disid
	    echo "pkgupdate $2" >>${QLIST} ;;
    daemon) run_daemon ;;
       log) display_log "$2" ;;
    status) list_status ;;
   results) list_results ;;
    getcfg) verify_disid
	    pbicdir="$2" ; jail="$3" ; key="$4"
            getcfg ;;
    setcfg) verify_disid
	    pbicdir="$2" ; jail="$3" ; key="$4"
	    value="$5"
	    if [ -n "$6" ] ; then value="$value $6" ; fi
	    if [ -n "$7" ] ; then value="$value $7" ; fi
	    if [ -n "$8" ] ; then value="$value $8" ; fi
            setcfg ;;
   donecfg) verify_disid
	    pbicdir="$2" ; jail="$3"
            donecfg ;;
  verify_disid) verify_disid
                exit $?
                ;;
         *) print_usage ; exit 150 ;;
esac

exit 0
